/*global unexpected*/
// THIS FILE IS AUTOGENERATED! DO NOT CHANGE IT MANUALLY.
// It is built based on the examples in the documentation folder
// when the documentation site gets build by running "make site-build".
it.skipIf = function (condition) {
    (condition ? it.skip : it).apply(it, Array.prototype.slice.call(arguments, 1));
};

describe("documentation tests", function () {
    var isBrowser = typeof weknowhow !== 'undefined';
    var isPhantom = typeof mochaPhantomJS !== 'undefined';
    var expect;
    beforeEach(function () {
        expect = unexpected.clone();
        expect.output.preferredWidth = 80;

    });

    it("assertions/any/to-resemble.md contains correct examples", function () {
        var testPromises = [];
        testPromises.push(expect.promise(function () {
            return expect('testdata/People.jpg', 'to resemble', 'testdata/People2.jpg');
        }).then(function () {
            return expect.promise(function () {
                expect.fail(function (output) {
                    output.error("expected:").nl();
                    output.code("return expect('testdata/People.jpg', 'to resemble', 'testdata/People2.jpg');").nl();
                    output.error("to throw");
                });
            });
        }).caught(function (e) {
            expect(e, "to have message",
                "hey"
            );
        }));

        return expect.promise.all(testPromises);
    });

    it("index.md contains correct examples", function () {
        var testPromises = [];
        testPromises.push(expect.promise(function () {
            return expect('testdata/People_small.jpg', 'to resemble', 'testdata/People2_small.jpg');
        }).then(function () {
            return expect.promise(function () {
                expect.fail(function (output) {
                    output.error("expected:").nl();
                    output.code("return expect('testdata/People_small.jpg', 'to resemble', 'testdata/People2_small.jpg');").nl();
                    output.error("to throw");
                });
            });
        }).caught(function (e) {
            expect(e, "to have message",
                "```\n" +
                "\n" +
                "For more fine-grained control, specify an object with comparison options,\n" +
                "which will matched against the result object from resemble.js with [to\n" +
                "satisfy](https://unexpectedjs.github.io/assertions/any/to-satisfy/) semantics:\n" +
                "\n" +
                "```javascript#async:true\n" +
                "return expect('foo.jpg', 'to resemble', 'bar.jpg', {\n" +
                "    misMatchPercentage: expect.it('to be less than', 10),\n" +
                "    isSameDimensions: false\n" +
                "});"
            );
        }));

        return expect.promise.all(testPromises);
    });
});
